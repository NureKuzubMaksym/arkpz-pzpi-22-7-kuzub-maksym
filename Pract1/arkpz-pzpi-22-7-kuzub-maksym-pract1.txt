МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»

ЗВІТ
до практичного заняття №1 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Правила оформлення програмного коду»

Виконав:

Прийняв:

ст. гр. ПЗПІ-22-7

ст. викладач кафедри ПІ

Кузуб Максим Олегович

Сокорчук Ігор Петрович

Харків 2024

1 МЕТА
Навчитися рефакторингу програмного коду, закріпити основні правила
оформлення коду.

2 ЗАВДАННЯ
Обрати мову програмування для прикладів коду. Створити презентацію на
тему «Правила оформлення програмного коду».

3 ХІД РОБОТИ
Обрана мова програмування: C++
У презентації наведено основні рекомендації щодо написання та оформлення програмного коду.

----------------------------------------------------
1. Важливість правил оформлення коду
----------------------------------------------------
Чому це важливо:
- Читабельність: Зрозумілий код знижує час на його аналіз.
- Підтримуваність: Добре оформлений код легше оновлювати і розширювати.
- Командна робота: Один стиль — менше конфліктів у команді.

Приклад:
Погано:
int x=10;int y=20;Console.WriteLine(x+y);

Добре:
int firstNumber = 10;
int secondNumber = 20;
Console.WriteLine(firstNumber + secondNumber);

----------------------------------------------------
2. Структура коду
----------------------------------------------------
Організація проєкту та файлів:
- Чітке розташування файлів: кожен клас/модуль у своєму файлі.
- Використання папок для групування функціональності.

Приклад структури:
Project/
├── Controllers/
│   ├── HomeController.cs
│   ├── AccountController.cs
├── Models/
│   ├── User.cs
│   ├── Product.cs
├── Views/
│   ├── Home/
│   ├── Account/

Принципи логічного поділу:
- Класи з однією відповідальністю.
- Модулі для схожої логіки.

----------------------------------------------------
3. Форматування коду
----------------------------------------------------
Відступи, довжина рядків:
- Використовуйте 4 пробіли для відступів (у C# це стандарт).
- Максимальна довжина рядка: 80–120 символів.

Приклад відступів:
Погано:
if (x>0){
Console.WriteLine("Positive");
}

Добре:
if (x > 0)
{
    Console.WriteLine("Positive");
}

Стандарти для дужок:
- Allman стиль (рекомендується для C#):
if (condition)
{
    // code
}

- K&R стиль (поширений у C++/Java):
if (condition) {
    // code
}

----------------------------------------------------
4. Іменування
----------------------------------------------------
Загальні принципи:
- Зрозумілість: імена відображають зміст.
- Конвенції:
  - CamelCase для змінних і методів: calculateSum().
  - PascalCase для класів: UserAccount.
  - Уникайте скорочень: usrNm → userName.

Приклад:
Погано:
int n; // Що це?

Добре:
int userAge;

----------------------------------------------------
5. Коментарі
----------------------------------------------------
Коли і де використовувати:
- Лише там, де логіка коду неочевидна.
- Не описуйте очевидні речі.

Приклад:
Погано:
// Змінна x збільшується на 1
x++;

Добре:
// Інкремент лічильника для циклу
counter++;

Документація:
- Використовуйте XML-коментарі в C#:
/// <summary>
/// Обчислює суму двох чисел.
/// </summary>
/// <param name="a">Перше число.</param>
/// <param name="b">Друге число.</param>
/// <returns>Сума чисел.</returns>
public int Add(int a, int b)
{
    return a + b;
}

----------------------------------------------------
6. Інструменти для перевірки стилю
----------------------------------------------------
- ReSharper: перевірка стилю для C#.
- EditorConfig: файли налаштування для VS та інших IDE.
- Git Hooks: автоматичний запуск перевірки коду перед комітом.

----------------------------------------------------
7. Приклади оформлення коду
----------------------------------------------------
Хороший код:
public class Calculator
{
    /// <summary>
    /// Додає два числа.
    /// </summary>
    public int Add(int firstNumber, int secondNumber)
    {
        return firstNumber + secondNumber;
    }

    /// <summary>
    /// Віднімає одне число від іншого.
    /// </summary>
    public int Subtract(int firstNumber, int secondNumber)
    {
        return firstNumber - secondNumber;
    }
}

Поганий код:
class calc{
int add(int a,int b){return a+b;}int sub(int a,int b){return a-b;}
}

----------------------------------------------------
8. Висновки
----------------------------------------------------
Дотримання правил оформлення коду є основою для створення якісного програмного забезпечення. 
Чіткий, стандартизований код робить проєкти зрозумілішими, спрощує їхнє читання, тестування та підтримку. 
Використання інструментів автоматизації дозволяє зменшити рутинну роботу і забезпечити сталість стилю. 
Дотримуйтесь стандартів, навчайтесь на хороших прикладах і постійно вдосконалюйте свої навички написання чистого та зрозумілого коду. 

----------------------------------------------------
ДОДАТОК А
----------------------------------------------------
Презентація на тему «Правила оформлення програмного коду».