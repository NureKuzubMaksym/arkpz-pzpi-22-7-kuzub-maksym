         Міністерство освіти і науки України Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
З лабораторної роботи №5
З дисципліни «Аналіз та рефакторинг коду»
на тему: «РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ»

Виконавець:
ст. гр. ПЗПІ-22-7	Кузуб М. О.

Перевірив:
ст. викладач кафедри ПІ	Сокорчук І. П.



















Харків 2024
Мета роботи:

     Розгорнути реалізовану програмну систему, перевірити та налаштувати роботу розгорнутої програмної системи.

1. Хід роботи:
1.1 Опис розгорнутої програмної системи
Серверна частина:
? Мова програмування: Серверна частина програми написана на мові програмування C#.
? Фреймворк: Використовується ASP.NET Core для створення REST API, що забезпечує обробку HTTP-запитів та маршрутизацію.
? База даних: MS SQL Server використовується для зберігання даних про транспортні засоби, маршрути та користувачів. Для взаємодії з базою даних застосовується Entity Framework Core, який забезпечує ORM-функціональність для роботи з реляційними даними.
? Контролери та маршрутизація: Реалізовані всі необхідні контролери для обробки HTTP-запитів. Доступні CRUD-операції (GET, POST, PUT, DELETE) для основних ресурсів системи, таких як транспортні засоби, маршрути та користувачі.
? Міграції та оновлення: Використовуються Entity Framework Core міграції для створення, оновлення та ініціалізації бази даних.
Функціональність:
 Система забезпечує:
? Облік транспортних засобів та маршрутів.
? Збір та аналіз даних про витрати пального, пройдену відстань та ефективність маршрутів.
? Можливість реєстрації користувачів, додавання нових маршрутів та перегляду інформації про транспорт.
Інтеграція з IoT:
 Система підтримує інтеграцію з IoT-пристроями через MQTT-брокер, що дозволяє збирати та передавати дані в реальному часі про стан транспорту, наприклад, його місцезнаходження чи витрати пального.
Опис розгортання:
Серверна частина:
1. Інсталяція залежностей: Встановлені всі необхідні пакети та бібліотеки через NuGet, включаючи Entity Framework Core та MQTT бібліотеки.
2. Налаштування середовища: Використовується файл налаштувань appsettings.json для збереження конфігурацій підключення до MS SQL Server (рядок підключення, налаштування облікових даних тощо).
3. Запуск сервера: Сервер запускається командою dotnet run. Для тестування API використовувались запити через Postman.
Перевірка функціональності:
? CRUD-запити до API успішно обробляються.
? Дані коректно зберігаються та отримуються з MS SQL Server.
? Модуль аналітики працює належним чином, генеруючи статистику на основі даних про транспортні засоби та маршрути.
Інтеграція IoT:
1. Налаштування MQTT: ESP32 пристрої налаштовані для підключення до Wi-Fi і передачі даних на сервер через MQTT.
2. Передача даних: Отримані дані автоматично обробляються сервером та зберігаються у базу даних для подальшого аналізу.
Використані інструменти та технології:
? C#: Серверна частина.
? ASP.NET Core: Розробка API.
? MS SQL Server: Зберігання реляційних даних.
? Entity Framework Core: ORM для взаємодії з базою даних.
? Postman: Тестування API.
? MQTT: З’єднання IoT-пристроїв із сервером.
? Visual Studio: Розробка та налагодження коду.
? GitHub: Керування версіями коду.

Висновок:
	Система успішно реалізована та розгорнута, забезпечуючи облік транспортних засобів, маршрутів і аналітику їхньої ефективності. Інтеграція з IoT дозволяє автоматично отримувати дані в реальному часі, що сприяє оптимізації управління транспортом.
Посилання на відео - https://youtu.be/Miy4gkMGdlQ
