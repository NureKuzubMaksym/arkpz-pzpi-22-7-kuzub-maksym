МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ

Кафедра «Програмна інженерія»

ЗВІТ
до практичного заняття №1 з дисципліни
«Аналіз та рефакторинг коду»
На тему: «Правила оформлення програмного коду»

Виконав:

Прийняв:

ст. гр. ПЗПІ-22-7

ст. викладач кафедри ПІ

Кузуб Максим Олегович

Сокорчук Ігор Петрович

Харків 2024

1 МЕТА
Навчитися використовувати основні методи рефакторингу для підвищення якості коду програмного забезпечення. 

2 ЗАВДАННЯ
Cтудент повинен обрати три методи рефакторингу коду із книги Мартіна
Фаулера «Refactoring. Improving the Design of Existing Code». Навести приклади
свого особистого коду (з курсових, лабораторних або інших проєктів), який
потребує покращення, та продемонструвати застосування обраних методів.

3 ХІД РОБОТИ
Вся робота була виконана та показана на слайдах презентації. Вона містить
всі обрані методи, приклади рефакторингу коду та висновки.

У даній роботі ми розглянемо три методи рефакторингу:

1. Extract Method (Виділення методу)
2. Rename Method (Перейменування методу)
3. Replace Conditional with Polymorphism (Заміна умовної логіки поліморфізмом)

---

Метод 1: Extract Method (Виділення методу)

Опис проблеми
Довгі методи з багатьма логічними блоками ускладнюють розуміння та тестування коду.

Код до рефакторингу
public void processOrder(Order order) {
    // Перевірка доступності товару
    if (!inventory.isAvailable(order.getProductId())) {
        throw new IllegalStateException("Product not available");
    }

    // Розрахунок знижки
    double discount = 0;
    if (order.getQuantity() > 10) {
        discount = 0.1;
    }

    // Оформлення замовлення
    double total = order.getPrice() * order.getQuantity() * (1 - discount);
    order.setTotal(total);
    saveOrder(order);
}

Реалізація рефакторингу
- Виділимо логічні блоки в окремі методи.

Код після рефакторингу
public void processOrder(Order order) {
    checkProductAvailability(order);
    double discount = calculateDiscount(order);
    finalizeOrder(order, discount);
}

private void checkProductAvailability(Order order) {
    if (!inventory.isAvailable(order.getProductId())) {
        throw new IllegalStateException("Product not available");
    }
}

private double calculateDiscount(Order order) {
    return order.getQuantity() > 10 ? 0.1 : 0;
}

private void finalizeOrder(Order order, double discount) {
    double total = order.getPrice() * order.getQuantity() * (1 - discount);
    order.setTotal(total);
    saveOrder(order);
}

Переваги
- Покращення читабельності коду.
- Спрощення тестування окремих методів.

---

Метод 2: Rename Method (Перейменування методу)

Опис проблеми
Неінформативні назви методів створюють плутанину під час роботи з кодом.

Код до рефакторингу
public double calc(Order o) {
    return o.getPrice() * o.getQuantity();
}

Реалізація
- Перейменуємо метод на більш інформативний.

Код після рефакторингу
public double calculateOrderTotal(Order order) {
    return order.getPrice() * order.getQuantity();
}

Переваги
- Код стає зрозумілішим для розробників.
- Зменшення часу на читання та аналіз функціоналу.

---

Метод 3: Replace Conditional with Polymorphism (Заміна умовної логіки поліморфізмом)

Опис проблеми
Умовна логіка з багатьма if-else або switch ускладнює додавання нових функцій та підтримку.

Код до рефакторингу
public double calculateShippingCost(Order order) {
    if (order.getType().equals("Standard")) {
        return 10;
    } else if (order.getType().equals("Express")) {
        return 20;
    } else if (order.getType().equals("Overnight")) {
        return 30;
    }
    throw new IllegalArgumentException("Unknown order type");
}

Реалізація
- Використаємо поліморфізм для кожного типу замовлення.

Код після рефакторингу
public interface ShippingStrategy {
    double calculateCost();
}

public class StandardShipping implements ShippingStrategy {
    @Override
    public double calculateCost() {
        return 10;
    }
}

public class ExpressShipping implements ShippingStrategy {
    @Override
    public double calculateCost() {
        return 20;
    }
}

public class OvernightShipping implements ShippingStrategy {
    @Override
    public double calculateCost() {
        return 30;
    }
}

// Використання
public double calculateShippingCost(Order order, ShippingStrategy strategy) {
    return strategy.calculateCost();
}

Переваги
- Легке додавання нових типів доставки без змін у базовому коді.
- Покращення структури та гнучкості.

---

Висновки
- Рефакторинг дозволяє покращити якість коду, роблячи його більш зрозумілим, підтримуваним та масштабованим.
- Використання методів, описаних у книзі Мартіна Фаулера, допомагає структурувати код і уникнути типових проблем.
- Отримані знання сприяють розвитку професійних навичок програмування.

