Міністерство освіти і науки України
Харківський національний університет радіоелектроніки



Кафедра програмної інженерії



Звіт
З дисципліни «Аналіз та рефакторинг коду»
З лабораторної роботи №3




Виконав:
ст. гр. ПЗПІ-22-7
Кузуб М. О. 

Перевів:
доц. каф. ПІ
Сокорчук І. П. 



	







Харків 2024

Мета роботи: 
     Розробити будову програмної системи «Програмна система для управління транспортом», включаючи створення UML діаграм для моделювання процесів взаємодії користувачів та компонентів системи, а також ER діаграми для структурування даних і візуалізації їх взаємозв'язків. Окрім цього, передбачається розробка функціональності для роботи з базою даних, що забезпечить збереження та обробку інформації про кровоздачі, запити лікарень та інші важливі процеси.

Хід роботи: 

1.1	Розробка будови програмної системи:
     Розроблена будова для програмної системи «Програмна система для управління транспортом».

1.2	Створення UML діаграми:
     Діаграма моделює функціонал інформаційної системи для управління банком крові рис.1.1. Система орієнтована на координацію дій між кількома групами користувачів, а саме: між адміністратором, користувачем та не зареєстрованим користувачем.
     Розглянемо Use Case діаграму, щоб побачити основний сценарій використання у рамках системи. На рисунку 1.1 зображено діаграму Use Case.

Рисунок 1.1 - Use Case Diagram.

1.3	Створення Deployment Diagram діаграми:
	Deployment Diagram потрібна для того, щоб показати, як програмна система розгортається на фізичних або віртуальних серверах.
     У моєму проекті Deployment Diagram покаже:
1.  Сервер, на якому розгорнуто серверну частину.
2. Базу даних.
3. Взаємодію між компонентами системи.
Розглянемо діаграму Deployment Diagram на рисунку 1.2.

Рисунок 1.2 - Deployment Diagram.

1.3	Створення Entity–Relationship Model діаграми:
     Логіка в системі:
     Користувачі (Users):
? Авторизуються за допомогою логіну та пароля.
? Роль (адміністратор або звичайний користувач) визначає доступ до різних частин програми.
     Поїздки (Trips):
? Зберігають дані про доставку (вантаж, адреси, відстань, витрати пального).
? Прив’язані до користувача (водія або менеджера), який створює запис.
Розглянемо діаграму Entity–Relationship Model на рисунку 1.3.

Рисунок 1.3 – Entity–Relationship Model.

1.4	Створення UML діаграмі діяльності (Activity Diagram):
     UML діаграма діяльності (Activity Diagram) показує послідовність дій або кроків в процесі, а також потік керування між ними.
Розглянемо діаграму UML діаграма діяльності (Activity Diagram) на рисунку 1.4.

Рисунок 1.4 - UML діаграма діяльності (Activity Diagram).

     Для роботи була обрана база даних Ms SQL та мову програмування C#.

Лінка на архів: https://drive.google.com/drive/folders/1cUeX3107pXQNDml1rR8KzSA69l_KlQUK?usp=drive_link

Висновки:
     Мною була розроблена серверна частина програмного продукту snailBase. Розроблені Use Case Diagram, Deployment Diagram, Entity–Relationship Model, UML діаграмі діяльності (Activity Diagram) для кращого представлення системи.
